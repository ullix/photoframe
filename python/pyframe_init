#!/usr/bin/python
# -*- coding: UTF-8 -*-

#### -*- coding: latin-1 -*-
#### -*- coding: UTF-8 -*-
"""Module docstring.


This serves as a long usage message.
"""

import sys
import time
import usb.core
import usb.util
import Image
import ImageFont
import ImageDraw
import StringIO
import struct


__author__ = "ullix"
__copyright__ = "Copyright 2011"


def write_jpg2frame(dev, pic):
    """Attach header to picture, pad with zeros if necessary, and send to frame"""

    # create header and stack before picture
    # middle 4 bytes have size of picture in little??? endian notion
    rawdata = b"\xa5\x5a\x18\x04" + struct.pack('<I', len(pic)) + b"\x48\x00\x00\x00" + pic
    
    # total transfers must be complete chunks of 16384  = 2 ^14. Complete by padding with zeros
    # for error picture an extra \x00 is required. Why ?
    pad = 16384 - (len(rawdata) % 16384) +1          
    tdata = rawdata + pad * b'\x00'
    ltdata = len(tdata) 
    #print("len(pic w. header):", len(rawdata), ", chunks of 16384=", len(rawdata)/16384., ", pad=", pad, ", len(data w. padding)=", ltdata, "= 16384 *",ltdata/16384.)

    try:
        # Syntax: write(self, endpoint, data, interface = None, timeout = None):
        endpoint = 0x02                
        sum = dev.write(endpoint, tdata )
    except:
        sum = 0
        print("ERROR: Writing jpg2frame failed with message:", sys.exc_info())

    return



def get_known_devices():
    # to identify photo frames by USB Vendor and Product ID
    # listed as: Name, idVendor, idProduct, [width , height - in pixel if applicable] 
    #
    # Samsung SPF-87H in either mini monitor mode or mass storage mode
    SPF87H_MiniMon  = {'name':"SPF87H Mini Monitor", 'idVendor':0x04e8, 'idProduct':0x2034, 'width':800, 'height':480 }
    SPF87H_MassSto  = {'name':"SPF87H Mass Storage", 'idVendor':0x04e8, 'idProduct':0x2033}
    # Samsung SPF-107H (data from web reports - not tested)
    SPF107H_MiniMon  = {'name':"SPF107H Mini Monitor", 'idVendor':0x04e8, 'idProduct':0x2036, 'width':1024, 'height':600 }
    SPF107H_MassSto  = {'name':"SPF107H Mass Storage", 'idVendor':0x04e8, 'idProduct':0x2035}
    # Samsung SPF-83H (data from web reports - not tested)
    SPF107H_MiniMon  = {'name':"SPF107H Mini Monitor", 'idVendor':0x04e8, 'idProduct':0x200d, 'width':800, 'height':600 }
    SPF107H_MassSto  = {'name':"SPF107H Mass Storage", 'idVendor':0x04e8, 'idProduct':0x200c}
    #          
    # 4GB flash: 1e3d:2092
    BFLASH4GB       = {'name':"Flash Drive 4 GB", 'idVendor':0x1e3d, 'idProduct':0x2092}
             
    known_devices_list  = ( SPF87H_MiniMon, SPF87H_MassSto, SPF107H_MiniMon, SPF107H_MassSto, SPF107H_MiniMon, SPF107H_MassSto, BFLASH4GB )

    return known_devices_list


 
def main(argv=None):
    global debug, random_mode, pfont, picture_list, dev, log, picture_device, devicedim

    usage = """
    Usage:  pframe_init
    """

    known_devices_list = get_known_devices()    

    # next 2 lines manually define which devices to use
    device0 = known_devices_list[0]
    device1 = known_devices_list[1]

    dev = init_device(device0, device1) 

    if dev is None:
        print "Could not find frame, "
        return

    fontpath        = "/usr/share/fonts/truetype/freefont/"
    font1           = "FreeSansBold.ttf"
    pfont = {}
    pfont['big']    = ImageFont.truetype(fontpath + font1, 120)

    # create a welcome slide and send to frame, then exit
    wtext = "Welcome" 
    wtext = time.strftime("%H:%M:%S")
    wtext_width, wtext_height = pfont['big'].getsize(wtext)
    wimage = Image.new("RGB",(800,480), "Chocolate")
    draw = ImageDraw.Draw(wimage)
    draw.text((400 - wtext_width/2 , 240 - wtext_height/2 ), wtext, font=pfont['big'], fill="gold")          

    output = StringIO.StringIO()
    wimage.save(output, "JPEG", quality=90)
    pic  = output.getvalue()
    output.close()
    
    write_jpg2frame(dev, pic)        


def find_device(device):
    """Try to find device on USB bus."""
    return usb.core.find(idVendor=device['idVendor'], idProduct=device['idProduct'])    


def init_device(device0, device1):

    print"Trying to find device",device0['name']
    dev = find_device(device0)
 
    if dev is not None:
        print"-- found it, trying to init it"
        r = frame_init(dev)
        print"-- Init completed"
    else:
        print "Could not find", device0['name'], " -  Going to use Mass Storage mode"
        print "Now trying to find device",device1['name']
        dev = find_device(device1)
        if dev is not None:
            print"-- found it, trying to switch it"
            frame_switch(dev)
            ts = time.time()
            while True:
                dev = find_device(device0)
                if dev is not None:
                    print"-- switching successful"
                    break
                elif time.time() - ts > 5:
                    print "-- switching failed"
                    return None
                    
            frame_init(dev)
        else:
            print "Could not find either device:", device0['name'], ", ", device1['name'], "\n"
        
    return dev

   
def frame_init(dev): 
    # set the active configuration. With no arguments, the first configuration will be the active one
    # 
    # Configuration setting is insufficient to keep frame in Mini Monitor mode. It switches back 
    # even after some pictures have been transferred successfully
    # it may not be necessary at all (but it does not seem to do any harm)
    #dev.set_configuration()
   
    # releasing and claiming interface is not sufficient for keeping frame in Mini Monitor mode
    # (but is also doing no harm)
    #usb.util.release_interface(dev, 0)
    #usb.util.claim_interface(dev, 0)
    
    # Syntax: ctrl_transfer(self, bmRequestType, bRequest, wValue=0, wIndex=0, data_or_wLength = None, timeout = None):
    # this is the minimum required to keep the frame in Mini Monitor mode!!!
    dev.ctrl_transfer(0xc0, 4 )    
    
    return 0  # always return as ok although not tested
    

def frame_switch(dev):
    
    # dev.ctrl_transfer(0xc0, 4 ) # as used for init does not switch into Mini Monitor mode
    # but this message does:  
      
    try:
        dev.ctrl_transfer(0x00|0x80,  0x06, 0xfe, 0xfe, 0xfe )
    except:
        # switching results in much activity on the bus, device id is changed, 
        # nothing is returned, resulting in errors. simpler to ignore 
        pass
       
    # settling of the bus and frame takes about 0.42 sec
    # give it some extra time, but then still make sure it has settled
    time.sleep(1)
     
    return 0     
        

if __name__ == "__main__": 
    main()

        
    