#!/usr/bin/python
# -*- coding: UTF-8 -*-

#### -*- coding: latin-1 -*-
#### -*- coding: UTF-8 -*-
"""Module docstring.


This serves as a long usage message.
"""

# Copyright (C) ullix
# 
# The following terms apply to all files associated
# with the software unless explicitly disclaimed in individual files.
# 
# The authors hereby grant permission to use, copy, modify, distribute,
# and license this software and its documentation for any purpose, provided
# that existing copyright notices are retained in all copies and that this
# notice is included verbatim in any distributions. No written agreement,
# license, or royalty fee is required for any of the authorized uses.
# Modifications to this software may be copyrighted by their authors
# and need not follow the licensing terms described here, provided that
# the new terms are clearly indicated on the first page of each file where
# they apply.
# 
# IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY
# DERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# 
# THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE
# IS PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE
# NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
# MODIFICATIONS.


import os
import sys
import glob
import time
import usb.core
import usb.util
import Image
import ImageFont
import ImageDraw
import StringIO
import getopt
import struct
import random
import xml.dom.minidom as dom
import inspect
import urllib

import subprocess
import commands
import signal

#xx = open("/var/log/pyframe/pyframe_start.log","a")
#xx.write("\nstarting pyframe - geht doch "+ time.strftime("%d.%m.%Y %H:%M:%S"))
#xx.close


__author__ = "ullix"
__copyright__ = "Copyright 2011"
__credits__ = [""]
__license__ = "GPL"
__version__ = "0.0.1"
__maintainer__ = ""
__email__ = ""
__status__ = "Prototype"


debug       = False
#debug       = True #use for testing only
verbose     = False
stopflag    = False


def lineno():
    """Return the current line number."""
    return inspect.currentframe().f_back.f_lineno


def show_user_info():
   """Show user and group ids, as actual and effective."""
    
   vprint( 'Effective User  :', os.geteuid())
   vprint( 'Effective Group :', os.getegid())
   vprint( 'Actual User     :', os.getuid(), 'Login user:', os.getlogin())
   vprint( 'Actual Group    :', os.getgid())
   vprint( 'Actual Groups   :', os.getgroups())
   return


def vprint(*args, **kwargs ):
    """Print args as a single line IF debug is true, or if dprint keyword is true."""

    forceprint = False
    for key in kwargs:
        if key == "forceprint":
            forceprint =kwargs[key]
        
    line = ""
    if debug or forceprint : 
        for arg in args:
            s = str(arg)
            line += s + " "
        log = open("/var/log/pyframe/pyframe.log", 'a')
        log.write(line + "\n")
        log.close() 
        print line
         

def write_jpg2frame(dev, pic):
    """Attach header to picture, pad with zeros if necessary, and send to frame"""

    ts = time.time()    # for timing the transfer

    # create header and stack before picture
    # middle 4 bytes have size of picture in little??? endian notion
    rawdata = b"\xa5\x5a\x18\x04" + struct.pack('<I', len(pic)) + b"\x48\x00\x00\x00" + pic
    
    # total transfers must be complete chunks of 16384  = 2 ^14. Complete by padding with zeros
    # for error picture an extra \x00 is required. Why ?
    pad = 16384 - (len(rawdata) % 16384) +1          
    tdata = rawdata + pad * b'\x00'
    ltdata = len(tdata) 
    vprint("len(pic w. header):", len(rawdata), ", chunks of 16384=", len(rawdata)/16384., ", pad=", pad, ", len(data w. padding)=", ltdata, "= 16384 *",ltdata/16384.)

    try:
        # Syntax: write(self, endpoint, data, interface = None, timeout = None):
        endpoint = 0x02                
        sum = dev.write(endpoint, tdata )
    except:
        sum = 0
        vprint("ERROR: Writing jpg2frame failed with message:", sys.exc_info(), forceprint=True)
        
    td = time.time() - ts 
    vprint("transfer of this picture: sec/pic:%.2f,  pic/sec:%.2f" % (td , 1/td))
    if sum != ltdata:
        vprint("ALERT: Number of bytes written: %d is different from expected number: %d" % (sum, ltdata),forceprint=True)
    return


def display_image(image):
    global picpid

    #print "CWD:", os.getcwd()
    #print "path", os.path.dirname(__file__) 
    #print "sys", 'sys.path[0] =', sys.path[0]
    
    image.save(sys.path[0] +"/temp/temp.jpg")    
    output = commands.getoutput('ps -A | grep display.py')

    print output
    if 'display.py' in output and 'display.py <defunct>' not in output:
        picpid = int(output[0:5])
        print picpid
        
        print "ITS ALIVE!!!"
        pass
        os.kill(picpid, signal.SIGUSR1)
    else:
        print "display not running or defunct"
        os.system("killall display.py"  )
        picpid = subprocess.Popen("display.py"  ).pid
        time.sleep(2)
        #print "picpid",picpid
        os.kill(picpid, signal.SIGUSR1)
        #print "picpid", picpid
   

def send_image2device(image, dev, quality=95):
    if picture_device == "frame":
        output = StringIO.StringIO()
        image.save(output, "JPEG", quality=quality)
        pic  = output.getvalue()
        output.close()
        write_jpg2frame(dev, pic)        
    else:
        display_image(image)
        #os.system("killall display")
        #image.show()
        #print "done image show"
    return


def GetErrorImage(lineno, msg, infile):
    """Return an Error image with text from args"""

    ltxt = ["ErrMsg: '{0}'".format(msg) ,                                           # IOError message
           "in line #: {0}".format(lineno),                                         # line number
           #"",                                                                      # empty line
           "Picture: '{0}'".format(os.path.basename(infile)),                       # current picture name
           "Folder : '{0}'".format(os.path.dirname(infile).rpartition('/')[2]),     # current picture folder
           "Path to Folder:",                                                       # 
           os.path.dirname(infile).rpartition('/')[0],                              # path to current picture folder
           ]

    wimage = Image.new("RGB",(800,480), "Red")
    draw = ImageDraw.Draw(wimage)
    draw.text((2 , 20 ), "Error", font=pfont['big'], fill="Black")
    for i,txt in enumerate(ltxt):
        draw.text((10 , 150 + i * 30 ), txt, font=pfont['small'], fill="black")

    vprint("ERROR ErrorImage prepared:", ", ".join(ltxt), forceprint = True)

    return wimage
    

def GetImage(infile):
    """Open image with filename infile, if needed and resize.
    Return an image in JPEG format with dimensions to match photoframe
    """
    global stopflag
    if stopflag:
        sys.exit()
       
    try:
        image = Image.open(infile)
        vprint("Info: GetImage->open: original image: ",image.format, image.size, image.mode)        
        #raise IOError, (1993, "my error message")
    except IOError as (msg):
        return GetErrorImage(lineno(), msg, infile)

    # convert picture from Palette mode (e.g GIF) to RGB mode if needed
    if image.mode == "P":
        image = image.convert("RGB")
        vprint("image after conversion from P to RGB is :",image.format, image.size, image.mode)
        
    #if exif says that picture is rotated, then rotate it to upright after reducing size
    try:
        orient_values = {1:0, 3:180, 6:270, 8:90}           #dict of {value_of-exif_orientation : degree_of_rotation_required}
        exif=dict(image._getexif().items())
        rotate = orient_values[exif[274]]                   #274 is orientation!
        if rotate == 90 or rotate == 270:
            image.thumbnail((devicedim[1],devicedim[0]), Image.ANTIALIAS)  
            #image=image.rotate(rotate, expand=True)   # do not use expand, it makes picture 1 pixel wider on both dims            
            image=image.rotate(rotate)
            vprint("exif found, required rotation:",rotate, "image after thumbnail and rotation:", image.format, image.size, image.mode)
        elif rotate == 180:
            image.thumbnail((devicedim[0],devicedim[1]), Image.ANTIALIAS)  
            #image=image.rotate(rotate, expand=True)   # do not use expand, it makes picture 1 pixel wider on both dims            
            image=image.rotate(rotate)
            vprint("exif found, required rotation:",rotate, "image after thumbnail and rotation:", image.format, image.size, image.mode)
        else:
            vprint("exif found, but no rotation required")   
    except:
        vprint("no exif data found, skipping rotation test")
 
    if image.size == (800,480):  
        vprint("image has proper size, no corrections")
        return image     

    w = image.size[0]   #width
    h = image.size[1]   #height
    if h > w : 
        vprint("Tall format, shrink and insert in black background")
        if h > devicedim[1]:
            image.thumbnail((devicedim[0],devicedim[1]), Image.ANTIALIAS)  
        simage = image     
        image = Image.new("RGB",(800,480), "black")
        image.paste(simage, (400 - simage.size[0]/2,0))    
        return image    
    
    if w > devicedim[0]:    
        #resize picture to be as wide as the frame width, but allow square picture
        #h can't be taller than w, otherwise it would have been caught above
        try:
            image.thumbnail((devicedim[0], devicedim[0]), Image.ANTIALIAS)
            vprint("line:", lineno(), "image after thumbnail: ", image.format, image.size, image.mode)
            #raise IOError, (1993, "my error message")
        except IOError as (msg):
            return GetErrorImage(lineno(), msg, infile)

    #image here is horizontal and no more than 800 wide
    w = image.size[0]   #width
    h = image.size[1]   #height
    if w == 800:
        #width is already proper size, 
        #but if too tall need to crop height now,
        #or insert into black background      
        if h > 480:
            vprint("Too high, crop from vertical")
            #too tall; do cropping: of difference take 1/4 from top, 3/4 from bottom
            cropmargin = h - 480
            croptop = cropmargin /4
            cropbottom = cropmargin - croptop
            try:
                image = image.crop((0, 0 + croptop, 800, h - cropbottom))
            except IOError as (msg):
                return GetErrorImage(lineno(), msg, infile)
                
        else:
            vprint("Shallow format, insert pic on black background")            
            simage = image             
            image = Image.new("RGB",(800,480), "black")
            image.paste(simage, (0, 240 - simage.size[1]/2))  

    else:
        #w must be < 800 at this point, and h must be < w, but could be greater than 480!
        print "=================================================in line ", lineno(), "image.size:", image.size
        if h > 480:
            image.thumbnail((devicedim[0],devicedim[1]), Image.ANTIALIAS)   
        simage = image             
        image = Image.new("RGB",(800,480), "black")
        image.paste(simage, (400 - simage.size[0]/2, 240 - simage.size[1]/2))  

        #stopflag = True
        
    return image   
                    

def send_picture (infile, dev, picnum):
    """Read a picture from filesystem, prepare and send to frame"""
    vprint("\n--------------------------\nInfo: send_picture: #{0}, {1}".format(picnum, infile), forceprint=True)

    image = GetImage(infile)    
        
    pname   = os.path.basename(infile)                                              # current picture name
    pfolder = os.path.dirname(infile).rpartition('/')[2]                            # current picture folder
    pname_width, pname_height = pfont['small'].getsize(pname)                       # size of picture name 
    #vprint("text_width, text_height",text_width, text_height)

    # add text to picture   
    draw = ImageDraw.Draw(image)
    draw.text((800 - pname_width - 2, pname_height - 20 ), pname, font=pfont['small'], fill="blue")   # pic name
    draw.text((2, pname_height - 20 ), pfolder, font=pfont['small'], fill="blue")                     # pic directory
    draw.text((380, 305), time.strftime("%H:%M"), font=pfont['time'], fill="gold")                    # current time
    if debug : 
        draw.text((10, 400), "#"+str(picnum), font=pfont['medium'], fill="yellow")                    # picnum
    
    q = 94 
    # one slide could not be transferred with q=95??? at 94, 93 it worked, and also at 96, 97, 98, 99
    # ??? why not at 95
    # pic is 2009-07%20Norwegen/imgp1785-m2.jpg
    limit = 23

    nl = "\n" # to make a NewLine in the log file when the first new quality needs to be recalculated
    flag = False

    if picture_device == "frame":      
        while True:
            output = StringIO.StringIO()
            try:
                image.save(output, "JPEG", quality=q)
            except IOError, msg:
                vprint("ERROR in send_picture->Image.save:", msg, forceprint=True)
                sys.exit() # can there be an error here?
                return 2
    
            pic  = output.getvalue()
            output.close()
           
            # Test for length and write log
            # in some 4000 photos, only 3 required a quality of 95 to stay under 23 chunks of 16384
            # none required a quality of 94 or less
            #    22 required 96
            #   124 required 97
            #  ~700 required 98
            #       so about 3000 could do with 99 
            # when the limit was 24, it failed with a  USBError('Operation timed out',) error after a few pictures!
            # conclusion: use limit of 23, and quality of 95, but still check for len of picture!

            #vprint("len(pic) =", len(pic), "chunks of 16384:",len(pic)/16384.,"q=",q)
            
            if len(pic) > (16384 * limit) :
                flag = True
                vprint(nl + "   limit=" + str(limit) + " (" + str(16384 * limit) +"), " + infile + ", q=" + str(q) + ", len(pic)=" + str(len(pic)) + "\n", forceprint = True)
                q -= 1
                nl = "" # reset new line
            else:
                if flag:
                    vprint( "OK limit=" + str(limit) + " (" + str(16384 * limit) +"), " + infile + ", q=" + str(q) + ", len(pic)=" + str(len(pic)) + "\n", forceprint = True)
                break
     
        write_jpg2frame(dev, pic)
    else:
        #os.system("killall display")
        #image.show()
        display_image(image)    
    return 0    


def slide_show(picture_list, timer):
    """Show the pictures in picture_list in order of picture_list.
    Run indefinitely. Use timer setting for delay between pictures
    """      
    lpl = len(picture_list)
    if lpl == 0:
        print "No pictures to show"
        return 1
 
    counter = 0
    passage = 0
    ts = time.time() 
    while True:
        passage += 1
        vprint("Starting passage #%d with picture list of %d pictures" % (passage, lpl), forceprint=True)
        for i, picture in enumerate(picture_list, start=1):
            send_picture (picture, dev, i  )
                                
            counter +=1      
            td = time.time() - ts
            vprint("#%d out of %d, Pictures written: %d in passage #%d, transfers overall: sec/pic: %.2f,  pic/sec: %.2f" %(i, lpl, counter, passage, td/counter, counter/td))
        
            time.sleep(timer)
            #if i > 33: break# testing !!!!!!!!!!!!!1
        break   #stop after 1st passage
        
    return


def isPicture(file):
    """Return true if file is picture in one of the supported formats""" 
    # tif files give error message "decoder tiff_jpeg not available"
    # and "decoder group4 not available"    
    #return os.path.splitext(file)[1][1:].lower() in ['jpg', 'jpeg', 'gif', 'png', 'bmp', 'tif', 'tiff']
    return os.path.splitext(file)[1][1:].lower() in ['jpg', 'jpeg', 'gif', 'png', 'bmp']
    #return os.path.splitext(file)[1][1:].lower() in ['gif']
     

def getfiles(path):
    """
    Fills picture_list with all picture files in and below path.
    Each line in picture_list is absolute path and filename of a supported picture.
    """    
    global picture_list
    try:
        # dir_list has all files and directories in path
        # any directory is WITHOUT ending '/'
        dir_list = os.listdir(path)
    except OSError as (errno, msg):
        # path may not be a directory or permission error
        vprint("ALERT: in getfiles, path:", path, ", errno: ", errno, "msg:", msg, forceprint = True)
        return
        
    for line in dir_list:
        file = path + "/" + line
        if os.path.isdir(file):
            getfiles( file)                 # dig into subdirectory
        elif isPicture(file):
            #if file == "/home/mm/copied_from_mm/bilder/misc/never underestimate the cenrifugal force.gif":
                picture_list.append(file)
        else:   
            # neither picture file nor directory; ignore 
            pass
              
    return


def getcatalogs():
    """Return a list of all available catalogs in the users default gthumb directory"""
    
    # default path for the gthumb catalogs of the logged in user
    gpath = os.environ['HOME'] + "/.local/share/gthumb/catalogs"

    cats = []   
    cat_list = []    
    try:
        # dir_list has all files and directories in path
        # directories are WITHOUT ending '/'
        dir_list = os.listdir(gpath)
    except:
        # path may not be a directory or permission error
        print "ERROR: in getcatalogs, gpath:", gpath
        return []
        
    # get only the directories     
    for line in dir_list:
        file = gpath + "/" + line
        #print file 
        if os.path.isdir(file):
            cats.append(file)
        else:   
            # not a directory; ignore 
            #print "not a directory:", file 
            pass

    # now get each catalog file from each directory
    for cat in cats:
        try:
            # dir_list has all files and directories in path
            # any directory is WITHOUT ending '/'
            dir_list = os.listdir(cat)
        except:
            # path may not be a directory or permission error
            print "ERROR: in getcatalogs, cat:", cat
            return []
    
        for line in dir_list:
            file = cat + "/" + line
            #print os.path.splitext(file)[1][1:]
            # append file only if it has catalog extension
            if os.path.splitext(file)[1][1:] == "catalog":
                cat_list.append(file)
    
    cat_list.sort() 

    if random_mode:
        random.shuffle(cat_list)
           
    return cat_list       


def getfiles_from_catalog(catalog): 
    """Extract files with path from xml file, and return as list"""
    catfiles = [] 
    baum = dom.parse(catalog)
    
    
    for eintrag in baum.firstChild.childNodes: 
        if eintrag.nodeName == "files": 
            for knoten in eintrag.childNodes: 
                if knoten.nodeName == "file":
                    
                    # strip off initial 'file://' in uri
                    ufile = knoten.getAttribute("uri")[7:]
                    #now convert from the url encoding (ö=%C3%B6) to UTF-8 and then to Latin-1
                    #otherwise, filenames don't work
                    pfile = urllib.unquote(ufile).encode('Latin-1')
  
                    if isPicture(pfile):
                        catfiles.append(pfile) 
    
    return catfiles
      

def get_fonts():
    """Return the predefined picture fonts"""

    fontpath        = "/usr/share/fonts/truetype/freefont/"
    font1           = "FreeSansBold.ttf"
    pfont = {}
    pfont['big']    = ImageFont.truetype(fontpath + font1, 120)
    pfont['medium'] = ImageFont.truetype(fontpath + font1,  70)
    pfont['small']  = ImageFont.truetype(fontpath + font1,  25)
    pfont['time']   = ImageFont.truetype(fontpath + font1, 160)
    
    return pfont
 

def get_known_devices():
    # to identify photo frames by USB Vendor and Product ID
    # listed as: Name, idVendor, idProduct, [width , height - in pixel if applicable] 
    #
    # Samsung SPF-87H in either mini monitor mode or mass storage mode
    SPF87H_MiniMon  = {'name':"SPF87H Mini Monitor", 'idVendor':0x04e8, 'idProduct':0x2034, 'width':800, 'height':480 }
    SPF87H_MassSto  = {'name':"SPF87H Mass Storage", 'idVendor':0x04e8, 'idProduct':0x2033}
    # Samsung SPF-107H (data from web reports - not tested)
    SPF107H_MiniMon  = {'name':"SPF107H Mini Monitor", 'idVendor':0x04e8, 'idProduct':0x2036, 'width':1024, 'height':600 }
    SPF107H_MassSto  = {'name':"SPF107H Mass Storage", 'idVendor':0x04e8, 'idProduct':0x2035}
    # Samsung SPF-83H (data from web reports - not tested)
    SPF107H_MiniMon  = {'name':"SPF107H Mini Monitor", 'idVendor':0x04e8, 'idProduct':0x200d, 'width':800, 'height':600 }
    SPF107H_MassSto  = {'name':"SPF107H Mass Storage", 'idVendor':0x04e8, 'idProduct':0x200c}
    #          
    # 4GB flash: 1e3d:2092
    BFLASH4GB       = {'name':"Flash Drive 4 GB", 'idVendor':0x1e3d, 'idProduct':0x2092}
             
    known_devices_list  = ( SPF87H_MiniMon, SPF87H_MassSto, SPF107H_MiniMon, SPF107H_MassSto, SPF107H_MiniMon, SPF107H_MassSto, BFLASH4GB )
    #vprint(known_devices_list)
    return known_devices_list


 
def main(argv=None):
    global debug, random_mode, pfont, picture_list, dev, log, picture_device, devicedim, picpid

    usage = """
    Usage:  pframe [Options] [Commands]
    
    Options:
        -h, --help          Show help
        -d, --debug         Print debug information. Default is not debug
        -v, --verbose       Be more verbose (not active yet)
        -V, --version       Show version
        -p, --picture=File  Show picture File (can be of type JPEG, GIF, PNG, TIF, and any size)
        -r, --random        Pictures will be shown randomly. Default is sequential
        -t, --timer=S       Set timer to S seconds. Default is 1 sec
        -s, --sort=asc|dsc  Sorting ascending or descending. Everything else is no sorting (=default)  
        
            --path=Path     Path to the start directory, from where pyframe will search for pictures. It will descend
                            into subdirectories. Path must end without '/'. Path cannot be used together with gthumb.
                            If gthumb is set, Path will be ignored.
            --gthumb=Cat    Show pictures from the gthumb catalogs. Cat defines, which catalog to show. If Cat is 'all',
                            then all will be shown. It suffices to specify only a part of the full catalog name,
                            like 'hawaii' to match with '2010 Hawaii vacation'.
        -k,  --key=Key      Key is message to show in pic
        
    Commands:
        init                Capture photo frame in Mini-Monitor mode
     
    """

    
    verbose      = False
    random_mode  = False
    sorting      = False
    gthumb       = False
    picture      = False   
    keytext      = False 
    timer        = 10
    picture_device  = "screen"
    
    picture_list = []  
    

    # path must end WITHOUT '/' !    
    #path = "/home/mm/bilder/timeline/2009-11 Thanksgiving"
    #path = "/home/mm/bilder/timeline/2009-10 San Diego"
    #path = "/home/mm/bilder/timeline/2011-07-21 Madeira"
    path = "/home/mm/bilder/timeline/2010-07 PCup2010 and Hawaii/PCup2010"
    #path = "/home/mm/bilder/timeline"
    #path = "/home/mm/bilder"
    #path = "/home/mm"

    # path for the gthumb catalogs of the user running the script
    gpath = os.environ['HOME'] + "/.local/share/gthumb/catalogs"

        
    # optional argv allows to run main with your set of command line options
    if argv is None:
        argv = sys.argv
  
    # parse command line options
    try:
        opts, args = getopt.getopt(argv[1:], "hVdvrt:s:p:k:", ["help", "version", "picture=", "verbose", "debug", "random", "timer=", "sort=", "path=", "gthumb=", "key="])
        #vprint("opt:", opts, "args:", args)
    except getopt.GetoptError, err :
        # print help information and exit:
        vprint(str(err), forceprint = True) # will print something like "option -a not recognized"
        vprint(usage, forceprint = True)
        return 2


    # processing options
    for opt, optval in opts:    
        if opt in ("-h", "--help"):
            print usage
            return 0
            
        elif opt in ("-V", "--Version"):
            print "Version:", __version__
            return 0   
                                   
        elif opt in ("-d", "--debug"):
            debug = True
                      
        elif opt in ("-v", "--verbose"):
            verbose = True
   
    if debug:
        vprint("\n"+ time.strftime("%d.%m.%Y %H:%M") + "~~~~~~~~~~~~~~~~~~~Begin~~~~~~~~~~~~~~~~~~~~~~~~~")
        vprint("sys.argv= %s" % sys.argv)
        vprint("Debug was set to True")
 
    if verbose:
        vprint("Verbose was set to True")    


    known_devices_list = get_known_devices()    
    if debug: find_devices (known_devices_list)
    
    # next 2 lines manually define which devices to use
    device0 = known_devices_list[0]
    devicedim = (device0['width'], device0['height'])
    device1 = known_devices_list[1]
    dev = init_device(device0, device1) 
    if dev is None:
        pass
        #vprint("Could not find device, giving up")
        print "Could not find frame, using screen"
        
        #!!!!!!!!!!!!!!!!!!1111 starting the pic viewr
        #os.system("killall display.py"  )
        #picpid = subprocess.Popen("display.py"  ).pid
        #time.sleep(2)
            
    else:
        print "Did find frame, using it"        
        picture_device = "frame" 
        vprint("Picture device is frame")
    
    pfont = get_fonts()

    # processing remaining options
    for opt, optval in opts:
        if opt in ("-d", "--debug", "-v", "--verbose"):
            pass # already handled above
     
        elif opt in ("-r", "--random"):
            random.seed()
            random_mode = True
            vprint( "Random mode was set to True")    
            
        elif opt in ("-t", "--timer"):
            timer = float(optval) 
            vprint( "Timer was set to %s sec" % optval )    
            
        elif opt in ("-s", "--sort"):
            optval = optval.lower()
            if optval  in ("asc", "dsc"):
                sorting = optval
            else:
                sorting = "none"
            vprint( "Sorting was set to '%s'" % sorting)    
            
        elif opt in ("-p", "--picture"):
            #default = False
            picture = optval
            if not os.path.isfile(picture):
                print "Picture '%s' is not a file" % picture
                return 1
            vprint("Picture was set to '%s'" % optval )
            
        elif opt in ("--path"):
            if optval[-1:] == "/":
                path = optval[:-1]
            else:
                path = optval
            if not os.path.exists(path):
                print "Path '%s' does not exist" % path
                return 1                
            if not os.access(path, os.R_OK):
                print "Path '%s' cannot be read" % path
                return 1    
            if not os.path.isdir(path):
                print "Path '%s' is not a directory" % path
                return 1                                   
            vprint("Path was set to %s" % path)           

        elif opt in ("--gthumb"):
            optval = optval.lower()
            cat_list = getcatalogs()
                      
            for cat in cat_list:
                if optval in cat.lower() or optval == "all":
                    vprint("catalog:", cat)
                    picture_list += getfiles_from_catalog(cat)
            gthumb = True
            vprint("Gthumb mode was set to true")  

        elif opt in ("-k", "--key"):
            keytext = optval
            # prepare pic and send
            wimage = Image.new("RGB",(800,480), "black")
            draw = ImageDraw.Draw(wimage)

            if keytext == "Hilfe":
                draw.text((5 , -20 ), keytext, font=pfont['big'], fill="#665")
   
                keys = [
                        ("AltGr-h", "Hilfe"),
                        ("AltGr-i", "Info"),
                        ("AltGr-ESC",       "Sound aus"),                  
                        ("AltGr-Shift-ESC", "Alles aus"),
                       ]
                
                tcolor = "gray"
                tfont  = pfont['small']
                #draw.text((10, 10 ), "Win+", font=tfont, fill=tcolor)        
                for i, txt in enumerate(keys, start = 1):
                    #print i, txt
                    draw.text((300, -25 + 28 * i ), txt[0], font=tfont, fill=tcolor)
                    draw.text((540, -25 + 28 * i ), txt[1], font=tfont, fill=tcolor)                
               
                keys = [
                        ("AltGr-F1",    "1 Live"),
                        ("AltGr-F2",    "WDR 2"),
                        ("AltGr-F3",    "WDR 5"),
                        ("AltGr-F4",    "SWR 3"),
                        ("AltGr-F5",    "NDR 1"),
                        ("AltGr-F6",    "NDR 2"),
                        ("AltGr-F7",    "NDR 90,3"),
                        ("AltGr-F8",    "KOIT 96.5"),
                        ("AltGr-1",     "Bayern 2"),
                        ("AltGr-2",     "Bayern 3"),
                        ("AltGr-3",     "Bayern 5 aktuell"),
                        ("AltGr-4",     "Bayern 5 plus"),
                       ]
                
                tcolor = "gray"
                tfont  = pfont['small']
                #draw.text((10, 10 ), "Win+", font=tfont, fill=tcolor)        
                for i, txt in enumerate(keys, start = 1):
                    #print i, txt
                    draw.text((10, 108 + 28 * i ), txt[0], font=tfont, fill=tcolor)
                    draw.text((150,108 + 28 * i ), txt[1], font=tfont, fill=tcolor)                
    
                keys = [
                        ("AltGr-d", "Diaschau"),
                        ("AltGr-D", "Diaschau aus"),
                        ("", ""),
                        ("AltGr-m", "Musik Mix"),
                        ("AltGr-c", "Musik Country"), 
                        ("AltGr-f", "Musik Film/Musical"), 
                        ("AltGr-j", "Musik Jazz"),
                        ("AltGr-p", "Musik Partymix"), 
                        ("AltGr-r", "Musik Rock 'n Roll"),
                        ("AltGr-s", "Musik Schlager"),                                                                                                                                             
                        ]
     
                #draw.text((350, 180 ), "Win+", font=tfont, fill=tcolor)        
                for i, txt in enumerate(keys, start = 1):
                    #print i, txt
                    draw.text((400, 108 + 28 * i ), txt[0], font=tfont, fill=tcolor)
                    draw.text((540, 108 + 28 * i ), txt[1], font=tfont, fill=tcolor)    
                     
                #draw.text((320, 50 ), u"Drücke Pinguin Taste plus:", font=pfont['small'], fill=tcolor)
                
            elif keytext == "Info":
                draw.text((5 , -20 ), keytext, font=pfont['big'], fill="#665")
                # ein Time updating fehlt noch
                draw.text((80, 205), time.strftime("%a, %e %b %G"), font=pfont['medium'], fill="#550")   # current date            
                draw.text((380, 305), time.strftime("%H:%M"), font=pfont['time'], fill="#550")   # current time
                
            else:
                # presently same as Info cause; nothing shown when keytext =""
                draw.text((5 , -20 ), keytext, font=pfont['big'], fill="#665")
                # ein Time updating fehlt noch
                draw.text((80, 205), time.strftime("%a, %e %b %G"), font=pfont['medium'], fill="#550")   # current date            
                draw.text((380, 305), time.strftime("%H:%M"), font=pfont['time'], fill="#550")   # current time

       
            send_image2device(wimage, dev)
            vprint("Keytext picture was produced with text: '%s'" % optval )

                                     
        else:
            print "Programming error 'unhandled option': %s" % opt    # programming error! opt is in getopt above, but not handled here
            return 1
 
    # processing arguments
    for arg in args:
        arg = arg.lower()
        vprint("processing arguments, arg:", arg) 
        if arg == "init":
            # create a welcome slide and send to frame, then exit
            wtext = "Welcome"
            wtext_width, wtext_height = pfont['big'].getsize(wtext)
            wimage = Image.new("RGB",(800,480), "Chocolate")
            draw = ImageDraw.Draw(wimage)
            draw.text((400 - wtext_width/2 , 240 - wtext_height/2 ), wtext, font=pfont['big'], fill="gold")          
            send_image2device(wimage, dev, quality = 90)
            return 0    # init ends here!
            
        else:
            vprint("Invalid argument '%s' provided" % arg)
            
    
    # If neither picture, nor gthumb, nor keytext, 
    # then default to scan path for pictures
    if picture: 
            send_picture (picture, dev, 0 )

    elif gthumb:
        slide_show(picture_list, timer)
    
    elif keytext:
        pass    # already done above
                    
    else: 
        getfiles(path)  # fills variable picture_list as global variable
        
        if random_mode:
            random.shuffle(picture_list)
             
        if sorting == "asc":
            picture_list.sort(reverse=False)
        elif sorting == "dsc":
            picture_list.sort(reverse=True)
        else:
            # no sorting
            pass

        slide_show(picture_list, timer)

    vprint("finished with options and args...")
            
    return 0


def find_devices (devicelist):
    """Try to find ALL known devices on USB bus."""
    vprint("\nFind known devices:")
    for device in devicelist:
        if find_device(device) is not None :
            vprint("\tFound    :", device)
        else:
            vprint("\tNOT found:", device )
    vprint("..........")        
    return


def find_device(device):
    """Try to find device on USB bus."""
    print "device", device
    return usb.core.find(idVendor=device['idVendor'], idProduct=device['idProduct'])    


def init_device(device0, device1):

    vprint("\nTrying to find device",device0['name'])
    dev = find_device(device0)
 
    if dev is not None:
        vprint("found it, trying to init it")
        r = frame_init(dev)
        vprint("Init completed, r=", r)
    else:
        print("Could not find", device0['name'], " -  Going to use Mass Storage mode")
        vprint("Trying to find device",device1['name'])
        dev = find_device(device1)
        if dev is not None:
            vprint("found it, trying to switch it")
            frame_switch(dev)
            ts = time.time()
            while True:
                dev = find_device(device0)
                if dev is not None:
                    vprint("switching successful") 
                    break
                elif time.time() - ts > 2:
                    vprint(True, "switching failed")
                    
            frame_init(dev)
        else:
            print(True, "Could not find either device:", device0['name'], ", ", device1['name'], "\n")
        
    return dev


   
def frame_init(dev): 
    # set the active configuration. With no arguments, the first configuration will be the active one
    # 
    # Configuration setting is insufficient to keep frame in Mini Monitor mode. It switches back 
    # even after some pictures have been transferred successfully
    # it may not be necessary at all (but it does not seem to do any harm)
    #dev.set_configuration()
   
    # releasing and claiming interface is not sufficient for keeping frame in Mini Monitor mode
    # (but is also doing no harm)
    #usb.util.release_interface(dev, 0)
    #usb.util.claim_interface(dev, 0)
    
    # Syntax: ctrl_transfer(self, bmRequestType, bRequest, wValue=0, wIndex=0, data_or_wLength = None, timeout = None):
    # this is the minimum required to keep the frame in Mini Monitor mode!!!
    dev.ctrl_transfer(0xc0, 4 )    
    
    return 0  # always return as ok although not tested
    

def frame_switch(dev):
    
    # dev.ctrl_transfer(0xc0, 4 ) # as used for init does not switch into Mini Monitor mode
    # but this message does:  
      
    try:
        dev.ctrl_transfer(0x00|0x80,  0x06, 0xfe, 0xfe, 0xfe )
    except:
        # switching results in much activity on the bus, device id is changed, 
        # nothing is returned, resulting in errors. simpler to ignore 
        pass
       
    # settling of the bus and frame takes about 0.42 sec
    # give it some extra time, but then still make sure it has settled
    time.sleep(1)
     
    return 0     
        

if __name__ == "__main__": 
    # exit code of main is used for sys.exit 
    try:    
        main()
        vprint("Ending pyframe now")
    except KeyboardInterrupt:
        vprint("Keyboard interrupt, ending pyframe")
    print "main pyframe has ended"
        
    